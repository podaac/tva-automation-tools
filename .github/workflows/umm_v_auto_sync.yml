# Copy umm v from ops to uat
name: Umm V Auto Sync
# Controls when the workflow will run
on:
  schedule:
    - cron: '0 8 * * *'  # Set the cron schedule for midnight PST
  workflow_dispatch:

jobs:
  # First job in the workflow installs and verifies the software
  build:
    name: Build, Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      #########################################################################
      # Environment Setup
      #########################################################################
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: 2.1.4

      #########################################################################
      # Install & Pylint & Flake
      #########################################################################
      - name: Poetry Steps
        run: |
          poetry install
#          poetry run pylint umm_v_auto/podaac/*
#          poetry run flake8 umm_v_auto/podaac/

      #########################################################################
      # Get AWS Lambda Tokens
      #########################################################################
      - name: Get Launchpad Tokens
        id: launchpad_token_generator
        if: |
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release')
        run: |
          set -euo pipefail

          echo "=== Getting UAT Launchpad Token ==="
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_CUMULUS_UAT }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_CUMULUS_UAT }}
          aws configure set region us-west-2

          OUTPUT_FILE_UAT=result_uat.json
          PAYLOAD=$(echo '{"client_id": "UmmVAutoSyncGithubAction", "minimum_alive_secs": 600}' | base64)

          echo "Invoking UAT Lambda..."
          aws lambda invoke \
            --function-name uat-launchpad_token_dispenser \
            --payload "$PAYLOAD" \
            "$OUTPUT_FILE_UAT"

          echo "UAT Lambda response:"
          cat "$OUTPUT_FILE_UAT"

          if ! UAT_RESULT=$(jq -r '.sm_token // empty' < "$OUTPUT_FILE_UAT"); then
            echo "ERROR: Failed to parse UAT sm_token from response."
            exit 1
          fi

          if [[ -z "$UAT_RESULT" ]]; then
            echo "ERROR: UAT sm_token is empty."
            exit 1
          fi

          echo "UAT token preview: ${UAT_RESULT:0:4}...[REDACTED]"
          echo "::add-mask::$UAT_RESULT"
          echo "uat_result=$UAT_RESULT" >> $GITHUB_OUTPUT

          echo "=== Getting OPS Launchpad Token ==="
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_CUMULUS_OPS }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_CUMULUS_OPS }}
          aws configure set region us-west-2

          OUTPUT_FILE_OPS=result_ops.json

          echo "Invoking OPS Lambda..."
          aws lambda invoke \
            --function-name ops-launchpad_token_dispenser \
            --payload "$PAYLOAD" \
            "$OUTPUT_FILE_OPS"

          echo "OPS Lambda response:"
          cat "$OUTPUT_FILE_OPS"

          if ! OPS_RESULT=$(jq -r '.sm_token // empty' < "$OUTPUT_FILE_OPS"); then
            echo "ERROR: Failed to parse OPS sm_token from response."
            exit 1
          fi

          if [[ -z "$OPS_RESULT" ]]; then
            echo "ERROR: OPS sm_token is empty."
            exit 1
          fi

          echo "OPS token preview: ${OPS_RESULT:0:4}...[REDACTED]"
          echo "::add-mask::$OPS_RESULT"
          echo "ops_result=$OPS_RESULT" >> $GITHUB_OUTPUT

      #########################################################################
      # UMM V Auto Sync
      #########################################################################
      - name: UMM V Auto Sync
        working-directory: umm_v_auto
        env:
          UAT_TOKEN_TEMP: ${{ steps.launchpad_token_generator.outputs.uat_result }}
          OPS_TOKEN_TEMP: ${{ steps.launchpad_token_generator.outputs.ops_result }}
        run: |
          poetry run python umm_v_auto_sync.py -ut $UAT_TOKEN_TEMP -ot $OPS_TOKEN_TEMP
